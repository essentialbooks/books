{
  "ID": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
  "Root": {
    "alive": true,
    "content": [
      "237eca71-7fc9-4070-a66d-dd82c78e11b6",
      "bf6ae871-3b2d-48d0-bd54-780703264123",
      "b0763781-39fa-4ec8-b343-996d7b67850e",
      "b4434d5f-0786-4138-8fe4-eeae6058fcda",
      "c9b6bb0e-ffc9-47c5-af25-2ae26c85865f",
      "a669a722-2e04-45f1-8213-471dd5864870",
      "1fd0fd75-a4a2-4050-9639-146fd77ac03d",
      "a697cb71-b8a2-4ee4-b66b-ac8337b86f62"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156262163,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1532214828244,
    "parent_id": "307fa1e6-11a1-4819-9b56-b002fddddb27",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Parsing and validating a token using the HMAC signing method"
        ]
      ]
    },
    "type": "page",
    "version": 52,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532214799035,
        "id": "237eca71-7fc9-4070-a66d-dd82c78e11b6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532214830124,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 309"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 309"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532214801727,
        "id": "bf6ae871-3b2d-48d0-bd54-780703264123",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532214830946,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Score: 0"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Score: 0"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532214803653,
        "id": "b0763781-39fa-4ec8-b343-996d7b67850e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532214831693,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 31136"
            ]
          ]
        },
        "type": "text",
        "version": 14,
        "inline_content": [
          {
            "Text": "$SOId: 31136"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532214804876,
        "id": "b4434d5f-0786-4138-8fe4-eeae6058fcda",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532214804890,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "type": "text",
        "version": 6
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156262161,
        "id": "c9b6bb0e-ffc9-47c5-af25-2ae26c85865f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532214837222,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// sample token string taken from the New example\ntokenString := \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJuYmYiOjE0NDQ0Nzg0MDB9.u1riaD1rW97opCoAuRCTy4w58Br-Zk-bh7vLiRIsrpU\"\n\n// Parse takes the token string and a function for looking up the key. The latter is especially\n// useful if you use multiple keys for your application.  The standard is to use 'kid' in the\n// head of the token to identify which key to use, but the parsed token (head and claims) is provided\n// to the callback, providing flexibility.\ntoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n    // Don't forget to validate the alg is what you expect:\n    if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\n        return nil, fmt.Errorf(\"Unexpected signing method: %v\", token.Header[\"alg\"])\n    }\n\n    // hmacSampleSecret is a []byte containing your secret, e.g. []byte(\"my_secret_key\")\n    return hmacSampleSecret, nil\n})\n\nif claims, ok := token.Claims.(jwt.MapClaims); ok \u0026\u0026 token.Valid {\n    fmt.Println(claims[\"foo\"], claims[\"nbf\"])\n} else {\n    fmt.Println(err)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// sample token string taken from the New example\ntokenString := \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJuYmYiOjE0NDQ0Nzg0MDB9.u1riaD1rW97opCoAuRCTy4w58Br-Zk-bh7vLiRIsrpU\"\n\n// Parse takes the token string and a function for looking up the key. The latter is especially\n// useful if you use multiple keys for your application.  The standard is to use 'kid' in the\n// head of the token to identify which key to use, but the parsed token (head and claims) is provided\n// to the callback, providing flexibility.\ntoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n    // Don't forget to validate the alg is what you expect:\n    if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\n        return nil, fmt.Errorf(\"Unexpected signing method: %v\", token.Header[\"alg\"])\n    }\n\n    // hmacSampleSecret is a []byte containing your secret, e.g. []byte(\"my_secret_key\")\n    return hmacSampleSecret, nil\n})\n\nif claims, ok := token.Claims.(jwt.MapClaims); ok \u0026\u0026 token.Valid {\n    fmt.Println(claims[\"foo\"], claims[\"nbf\"])\n} else {\n    fmt.Println(err)\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156262162,
        "id": "a669a722-2e04-45f1-8213-471dd5864870",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156262162,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156262162,
        "id": "1fd0fd75-a4a2-4050-9639-146fd77ac03d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156262162,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "bar 1.4444784e+09"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "bar 1.4444784e+09",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156262163,
        "id": "a697cb71-b8a2-4ee4-b66b-ac8337b86f62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156262163,
        "parent_id": "3b6d2197-60cb-479c-ae65-bfc7f185c1b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(From the "
            ],
            [
              "documentation",
              [
                [
                  "a",
                  "https://godoc.org/github.com/dgrijalva/jwt-go#ex-Parse--Hmac"
                ]
              ]
            ],
            [
              ", courtesy of Dave Grijalva.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(From the "
          },
          {
            "Text": "documentation",
            "Link": "https://godoc.org/github.com/dgrijalva/jwt-go#ex-Parse--Hmac"
          },
          {
            "Text": ", courtesy of Dave Grijalva.)"
          }
        ]
      }
    ],
    "title": "Parsing and validating a token using the HMAC signing method",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 10
    }
  ],
  "Tables": null
}