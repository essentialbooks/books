{
  "ID": "6744c6d0-d620-448d-be66-e224f64b6f8b",
  "Root": {
    "alive": true,
    "content": [
      "d750c4ce-eaec-437a-a799-780a5ce88b81",
      "dc94420d-7e66-4870-b23a-299bd07eb332",
      "1a38f763-f3ed-4a59-945c-b1a4d0ea6159",
      "0c5c89e4-c237-4863-8dac-5b1d42846b40",
      "79351d89-3323-4f88-9472-06b5ce786f09",
      "ab4aec53-af38-48db-b024-96b17787ffda",
      "9f8fb3ab-b36c-47dc-a781-2da9b355f69b",
      "179105ef-264e-42ec-8f23-1f44eb3a56be",
      "9867e9e3-8f6f-4d8d-90bf-72dc3ec934b0",
      "2b8b8fc8-e131-4e3b-b2a4-3199362372ba",
      "bfecc510-45a2-49c8-8fd1-4fa90be97684",
      "456819bf-1757-4f92-ad03-ade9cde3ec31",
      "30c435ca-a95d-4bd8-949b-b8cd5792a6cc",
      "4e00686a-a9be-454e-806d-70bdbba1cee5",
      "5f95ccf2-380b-4a73-9b16-dc02900fc0dd",
      "67c5b416-516c-4133-a403-f68c4fa79ac9",
      "74b4e4c6-e3fc-462f-a6c5-fb4f806a0978",
      "87752082-a7e6-4b26-8267-2c951fefab0d",
      "5dba840c-faa3-43ac-bc02-9e4f29be2fb7",
      "b926088d-f48c-44e6-86b0-be7ab933ee68",
      "fa03363a-9847-46c4-aa6b-25bce946d830",
      "cb67d6f8-9f33-4fc9-bb8c-598c178803ce",
      "19ef96df-d346-4de8-b946-b4db06ddd8e3",
      "9d84fc14-fe2f-41a3-8f34-08aa670d9f96",
      "084947ae-8157-440b-aed1-a0d55bbc370f",
      "f728362e-b76d-4d9c-bf62-46c137299ea7",
      "831d8e3e-abb4-431b-9dae-7577a179c90f",
      "4adbf1d8-a3a2-4183-83e3-086718bd53d9",
      "542cdfa7-479c-4918-9810-88adc223adf4",
      "1b2f153d-2fd3-404a-a1b7-51512f1e1856",
      "2ab61333-5285-40ee-afbb-12b1d9fca08d",
      "c2a48169-0804-457b-a4f9-37c9c1e5a55d",
      "737850ee-fd45-462e-807a-2c0dc7b83430",
      "b343b332-2335-4280-b863-0a96bd11561b",
      "59e924ef-82eb-462a-86a3-fe905d13c2ce",
      "7d0ad68b-65cd-4074-aa98-85b63da9e3b0",
      "aa8105fe-264b-4b19-8647-cbc718480ba1",
      "8b225356-aaa9-4069-90d2-79868a1cd548"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156117186,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1538795768387,
    "parent_id": "2cab1ed2-b7a4-4584-b56b-0d3ca9b80185",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "XML"
        ]
      ]
    },
    "type": "page",
    "version": 39,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207920542,
        "id": "d750c4ce-eaec-437a-a799-780a5ce88b81",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207923333,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 189"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 189"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207922067,
        "id": "dc94420d-7e66-4870-b23a-299bd07eb332",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207922708,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "type": "text",
        "version": 10
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117176,
        "id": "1a38f763-f3ed-4a59-945c-b1a4d0ea6159",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117176,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Package "
            ],
            [
              "encoding/xml",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://godoc.org/encoding/xml"
                ]
              ]
            ],
            [
              " in standard library provides functionality for serializing data as XML and parsing XML."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Package "
          },
          {
            "Text": "encoding/xml",
            "AttrFlags": 2,
            "Link": "https://godoc.org/encoding/xml"
          },
          {
            "Text": " in standard library provides functionality for serializing data as XML and parsing XML."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117176,
        "id": "0c5c89e4-c237-4863-8dac-5b1d42846b40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117176,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parse XML into a struct"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parse XML into a struct"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117176,
        "id": "79351d89-3323-4f88-9472-06b5ce786f09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795736615,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parsing XML is similar to parsing JSON. You define structures that map to the structure of XML and unmarshal from "
            ],
            [
              "[]byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " slice or "
            ],
            [
              "io.Reader",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a struct."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Parsing XML is similar to parsing JSON. You define structures that map to the structure of XML and unmarshal from "
          },
          {
            "Text": "[]byte",
            "AttrFlags": 2
          },
          {
            "Text": " slice or "
          },
          {
            "Text": "io.Reader",
            "AttrFlags": 2
          },
          {
            "Text": " into a struct."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1538795732934,
        "format": {
          "block_height": 320,
          "display_source": "https://www.onlinetool.io/gitoembed/widget?url=https%3A%2F%2Fgithub.com%2Fessentialbooks%2Fbooks%2Fblob%2Fmaster%2Fbooks%2Fgo%2F0320-xml%2Funmarshal_simple.go",
          "block_full_width": false,
          "block_page_width": true,
          "block_preserve_scale": false
        },
        "id": "ab4aec53-af38-48db-b024-96b17787ffda",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795735053,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "https://www.onlinetool.io/gitoembed/widget?url=https%3A%2F%2Fgithub.com%2Fessentialbooks%2Fbooks%2Fblob%2Fmaster%2Fbooks%2Fgo%2F0320-xml%2Funmarshal_simple.go"
            ]
          ]
        },
        "type": "embed",
        "version": 8,
        "format_embed": {
          "block_full_width": false,
          "block_height": 320,
          "block_page_width": true,
          "block_preserve_scale": false,
          "display_source": "https://www.onlinetool.io/gitoembed/widget?url=https%3A%2F%2Fgithub.com%2Fessentialbooks%2Fbooks%2Fblob%2Fmaster%2Fbooks%2Fgo%2F0320-xml%2Funmarshal_simple.go"
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117177,
        "id": "9f8fb3ab-b36c-47dc-a781-2da9b355f69b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117177,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unlike with serializing, when unmarshalling into a struct, we must pass a pointer to struct. Otherwise "
            ],
            [
              "xml.Unmarshal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will receive and modify a copy of the struct, not the struct itself. The copy will be then discarded after returning from "
            ],
            [
              "xml.Unmarshal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unlike with serializing, when unmarshalling into a struct, we must pass a pointer to struct. Otherwise "
          },
          {
            "Text": "xml.Unmarshal",
            "AttrFlags": 2
          },
          {
            "Text": " will receive and modify a copy of the struct, not the struct itself. The copy will be then discarded after returning from "
          },
          {
            "Text": "xml.Unmarshal",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117177,
        "id": "179105ef-264e-42ec-8f23-1f44eb3a56be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117177,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In XML a value can be represented as element ("
            ],
            [
              "\u003cstate\u003eCA\u003c/state\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") or attribute ("
            ],
            [
              "\u003cperson age=\"34\"\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In XML a value can be represented as element ("
          },
          {
            "Text": "\u003cstate\u003eCA\u003c/state\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") or attribute ("
          },
          {
            "Text": "\u003cperson age=\"34\"\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117178,
        "id": "9867e9e3-8f6f-4d8d-90bf-72dc3ec934b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117178,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In xml struct tags element is the default. To switch to attribute, add "
            ],
            [
              ",attr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to struct xml tag as done for "
            ],
            [
              "Age",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In xml struct tags element is the default. To switch to attribute, add "
          },
          {
            "Text": ",attr",
            "AttrFlags": 2
          },
          {
            "Text": " to struct xml tag as done for "
          },
          {
            "Text": "Age",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117178,
        "id": "2b8b8fc8-e131-4e3b-b2a4-3199362372ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117178,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All struct fields are optional. When not present in XML text their values will be untouched. When decoding into newly initialized struct their value will be zero value for a given type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All struct fields are optional. When not present in XML text their values will be untouched. When decoding into newly initialized struct their value will be zero value for a given type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117178,
        "id": "bfecc510-45a2-49c8-8fd1-4fa90be97684",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117178,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Field "
            ],
            [
              "City",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shows that XML decoder can automatically decode into a pointer to a value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Field "
          },
          {
            "Text": "City",
            "AttrFlags": 2
          },
          {
            "Text": " shows that XML decoder can automatically decode into a pointer to a value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117178,
        "id": "456819bf-1757-4f92-ad03-ade9cde3ec31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117178,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is useful when you need to know if a value was present in XML or not. If we used "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "City",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " field, we wouldn’t know if empty string means:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is useful when you need to know if a value was present in XML or not. If we used "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": " for "
          },
          {
            "Text": "City",
            "AttrFlags": 2
          },
          {
            "Text": " field, we wouldn’t know if empty string means:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117182,
        "id": "30c435ca-a95d-4bd8-949b-b8cd5792a6cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117182,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "city",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " element was not present in XML"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "city",
            "AttrFlags": 2
          },
          {
            "Text": " element was not present in XML"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117182,
        "id": "4e00686a-a9be-454e-806d-70bdbba1cee5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117182,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "element was present but had empty value ("
            ],
            [
              "\u003ccity\u003e\u003c/city\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "element was present but had empty value ("
          },
          {
            "Text": "\u003ccity\u003e\u003c/city\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117182,
        "id": "5f95ccf2-380b-4a73-9b16-dc02900fc0dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117182,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By using a pointer to a string we know that "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " means there was no value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By using a pointer to a string we know that "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " means there was no value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117183,
        "id": "67c5b416-516c-4133-a403-f68c4fa79ac9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795768387,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Serialize a struct as XML"
            ]
          ]
        },
        "type": "sub_header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Serialize a struct as XML"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1538795763256,
        "format": {
          "block_height": 320,
          "display_source": "https://www.onlinetool.io/gitoembed/widget?url=https%3A%2F%2Fgithub.com%2Fessentialbooks%2Fbooks%2Fblob%2Fmaster%2Fbooks%2Fgo%2F0320-xml%2Fmarshal_simple.go",
          "block_full_width": false,
          "block_page_width": true,
          "block_preserve_scale": false
        },
        "id": "74b4e4c6-e3fc-462f-a6c5-fb4f806a0978",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795765116,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "https://www.onlinetool.io/gitoembed/widget?url=https%3A%2F%2Fgithub.com%2Fessentialbooks%2Fbooks%2Fblob%2Fmaster%2Fbooks%2Fgo%2F0320-xml%2Fmarshal_simple.go"
            ]
          ]
        },
        "type": "embed",
        "version": 8,
        "format_embed": {
          "block_full_width": false,
          "block_height": 320,
          "block_page_width": true,
          "block_preserve_scale": false,
          "display_source": "https://www.onlinetool.io/gitoembed/widget?url=https%3A%2F%2Fgithub.com%2Fessentialbooks%2Fbooks%2Fblob%2Fmaster%2Fbooks%2Fgo%2F0320-xml%2Fmarshal_simple.go"
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117183,
        "id": "87752082-a7e6-4b26-8267-2c951fefab0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1533063553402,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both "
            ],
            [
              "xml.Marshal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "xml.MarshalIndent",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " take "
            ],
            [
              "interface{}",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Empty-interface-c3315892508248fdb19b663bf8bff028"
                ]
              ]
            ],
            [
              " as first argument. We can pass any Go value and it’ll be wrapped into "
            ],
            [
              "interface{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with their type."
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "Both "
          },
          {
            "Text": "xml.Marshal",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "xml.MarshalIndent",
            "AttrFlags": 2
          },
          {
            "Text": " take "
          },
          {
            "Text": "interface{}",
            "AttrFlags": 2,
            "Link": "https://www.notion.so/kjkpublic/Empty-interface-c3315892508248fdb19b663bf8bff028"
          },
          {
            "Text": " as first argument. We can pass any Go value and it’ll be wrapped into "
          },
          {
            "Text": "interface{}",
            "AttrFlags": 2
          },
          {
            "Text": " with their type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117184,
        "id": "5dba840c-faa3-43ac-bc02-9e4f29be2fb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1533063564870,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Marshaller will use "
            ],
            [
              "reflection",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Reflection-c7fea6b176b74c54ab35f2d8fdd56f13"
                ]
              ]
            ],
            [
              " to inspect passed value and encode it as XML strings."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Marshaller will use "
          },
          {
            "Text": "reflection",
            "Link": "https://www.notion.so/kjkpublic/Reflection-c7fea6b176b74c54ab35f2d8fdd56f13"
          },
          {
            "Text": " to inspect passed value and encode it as XML strings."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117184,
        "id": "b926088d-f48c-44e6-86b0-be7ab933ee68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117184,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When serializing structs, only exported fields (whose names start with capital letter) are serialized / deserialized."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When serializing structs, only exported fields (whose names start with capital letter) are serialized / deserialized."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117184,
        "id": "fa03363a-9847-46c4-aa6b-25bce946d830",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117184,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In our example, "
            ],
            [
              "noteSerialized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not serialized."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In our example, "
          },
          {
            "Text": "noteSerialized",
            "AttrFlags": 2
          },
          {
            "Text": " is not serialized."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117184,
        "id": "cb67d6f8-9f33-4fc9-bb8c-598c178803ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117184,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Structs are serialized as XML elements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Structs are serialized as XML elements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117185,
        "id": "19ef96df-d346-4de8-b946-b4db06ddd8e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117185,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Simple types can be serialized as XML elements or attributes ("
            ],
            [
              "Age",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " field in "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " struct)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Simple types can be serialized as XML elements or attributes ("
          },
          {
            "Text": "Age",
            "AttrFlags": 2
          },
          {
            "Text": " field in "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " struct)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117185,
        "id": "9d84fc14-fe2f-41a3-8f34-08aa670d9f96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117185,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default name of element / attribute is the same as name of the field."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default name of element / attribute is the same as name of the field."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117185,
        "id": "084947ae-8157-440b-aed1-a0d55bbc370f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117185,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can provide custom mappings with struct tags."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can provide custom mappings with struct tags."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117185,
        "id": "f728362e-b76d-4d9c-bf62-46c137299ea7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117185,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "xml:\"city\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " tells XML encoder to use name "
            ],
            [
              "city",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for field "
            ],
            [
              "City",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "xml:\"city\"",
            "AttrFlags": 2
          },
          {
            "Text": " tells XML encoder to use name "
          },
          {
            "Text": "city",
            "AttrFlags": 2
          },
          {
            "Text": " for field "
          },
          {
            "Text": "City",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117186,
        "id": "831d8e3e-abb4-431b-9dae-7577a179c90f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117186,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When serializing structs, passing the value or a pointer to "
            ],
            [
              "xml.Marshal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " generates the same result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When serializing structs, passing the value or a pointer to "
          },
          {
            "Text": "xml.Marshal",
            "AttrFlags": 2
          },
          {
            "Text": " generates the same result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117186,
        "id": "4adbf1d8-a3a2-4183-83e3-086718bd53d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117186,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Passing a pointer is more efficient because passing by value creates unnecessary copy."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Passing a pointer is more efficient because passing by value creates unnecessary copy."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117186,
        "id": "542cdfa7-479c-4918-9810-88adc223adf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117186,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "xml.MarshallIndent",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows for pretty-printing of nested structures. The result takes up more space but is easier to read."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "xml.MarshallIndent",
            "AttrFlags": 2
          },
          {
            "Text": " allows for pretty-printing of nested structures. The result takes up more space but is easier to read."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117186,
        "id": "1b2f153d-2fd3-404a-a1b7-51512f1e1856",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156117186,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "XMLName",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows to control the name of top-level element. In our example, without providing XML element, the data would be serialized based on the struct name:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "XMLName",
            "AttrFlags": 2
          },
          {
            "Text": " allows to control the name of top-level element. In our example, without providing XML element, the data would be serialized based on the struct name:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156117186,
        "id": "2ab61333-5285-40ee-afbb-12b1d9fca08d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207916759,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "XML"
            ]
          ],
          "title": [
            [
              "\u003cPeople\u003e\n    ....\n\u003c/People\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003cPeople\u003e\n    ....\n\u003c/People\u003e",
        "code_language": "XML"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207895835,
        "id": "c2a48169-0804-457b-a4f9-37c9c1e5a55d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207895835,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156118117,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "737850ee-fd45-462e-807a-2c0dc7b83430",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795801581,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pull (streaming) XML parsing"
            ]
          ]
        },
        "type": "page",
        "version": 26,
        "title": "Pull (streaming) XML parsing",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156119194,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "b343b332-2335-4280-b863-0a96bd11561b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795828684,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hybrid XML parsing: combine pull and unmarshal"
            ]
          ]
        },
        "type": "page",
        "version": 93,
        "title": "Hybrid XML parsing: combine pull and unmarshal",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156120171,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795856249,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parse XML from file"
            ]
          ]
        },
        "type": "page",
        "version": 32,
        "title": "Parse XML from file",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156121235,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "7d0ad68b-65cd-4074-aa98-85b63da9e3b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538796046436,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Configuring XML parsing and serialization"
            ]
          ]
        },
        "type": "page",
        "version": 82,
        "title": "Configuring XML parsing and serialization",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156122214,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "aa8105fe-264b-4b19-8647-cbc718480ba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538796071764,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Custom XML marshaling"
            ]
          ]
        },
        "type": "page",
        "version": 28,
        "title": "Custom XML marshaling",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156123162,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "8b225356-aaa9-4069-90d2-79868a1cd548",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208101368,
        "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Easy generation of XML struct definition"
            ]
          ]
        },
        "type": "page",
        "version": 19,
        "title": "Easy generation of XML struct definition",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      }
    ],
    "title": "XML",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 10
    }
  ],
  "Tables": null
}